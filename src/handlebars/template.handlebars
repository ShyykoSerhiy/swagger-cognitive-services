{{! importing superagent for requests }}
import * as request from 'superagent';
import {Writable} from 'stream';

//unfortunately we need to 'rewrite' typings for superagent by adding type for body
export interface Response<BodyType> extends NodeJS.ReadableStream {
    text: string;
    body: BodyType;
    files: any;
    header: any;
    type: string;
    charset: string;
    status: number;
    statusType: number;
    info: boolean;
    ok: boolean;
    redirect: boolean;
    clientError: boolean;
    serverError: boolean;
    error: Error;
    accepted: boolean;
    noContent: boolean;
    badRequest: boolean;
    unauthorized: boolean;
    notAcceptable: boolean;
    notFound: boolean;
    forbidden: boolean;
    xhr: XMLHttpRequest;
    get(header: string): string;
}

export interface Request<Type> extends Promise<Response<Type>> {
    abort(): void;
    accept(type: string): this;
    attach(field: string, file: string, filename?: string): this;
    auth(user: string, name: string): this;
    buffer(val?: boolean): this;
    clearTimeout(): this;
    end(callback?: (err: any, res: Response<Type>) => void): this;
    field(name: string, val: string): this;
    get(field: string): string;
    on(name: string, handler: Function): this;
    on(name: 'error', handler: (err: any) => void): this;
    part(): this;
    pipe(stream: NodeJS.WritableStream, options?: Object): Writable;
    query(val: Object): this;
    redirects(n: number): this;
    responseType(type: string): this;
    send(data: string): this;
    send(data: Object): this;
    send(): this;
    set(field: string, val: string): this;
    set(field: Object): this;
    timeout(ms: number): this;
    type(val: string): this;
    unset(field: string): this;
    use(fn: Function): this;
    withCredentials(): this;
    write(data: string, encoding?: string): this;
    write(data: Buffer, encoding?: string): this;
    parse(fn: (res: Response<Type>, callback: (err: Error | null, body: Type) => void) => void): this;
}

{{#*inline "methodParametersInterfaces"}}
//Interfaces for {{typeParameters}} of the methods

{{#each methods}}                
    {{#if (lookup . ../typeParameters)}}
export interface {{lookup . ../normTypeParametersName}} {
        {{#each (lookup . ../typeParameters)}}
    /**
    * {{description}}
    * Real name : {{name}}
    */    
    {{normName}}{{#if required}}{{else}}?{{/if}}: {{type}};
        {{/each}}
}
const {{lookup . ../normTypeParametersName}}NameMap = {
    {{#each (lookup . ../typeParameters)}}
    {{normName}}: "{{name}}"{{#if @last}}{{else}},{{/if}}
    {{/each}}    
};
    {{/if}}
{{/each}}
{{/inline}}
{{#*inline "globalParametersInterfaces"}}
{{#if globalTypeParameters}}
/**
*Interface for global {{type}} parameters
*/
export interface Global{{type}}Parameters {
    {{#each globalTypeParameters}}
    /**
    * {{description}}
    * Real name : {{name}}
    */    
    {{normName}}{{#if required}}{{else}}?{{/if}}: {{type}};
    {{/each}}    
}
const Global{{type}}ParametersNameMap = {
    {{#each globalTypeParameters}}
    {{normName}}: "{{name}}"{{#if @last}}{{else}},{{/if}}
    {{/each}}    
};
{{/if}}
{{/inline}}
{{#*inline "globalParametersPublicField"}}
{{#if globalTypeParameters}}
/**
* Global {{type}} parameters. If defined this parameters will be used for every request.
*/
public global{{type}}Parameters: Global{{type}}Parameters = {};    
{{/if}}
{{/inline}}
{{#*inline "mergeGlobalParameters"}}
{{#if globalTypeParameters}}
{{paramVar}} = Object.assign({}, convertParamsToRealParams(this.global{{type}}Parameters as any as Params, Global{{type}}ParametersNameMap), {{paramVar}});
{{/if}}
{{/inline}}
{{#*inline "mergeLocalParameters"}}
{{#if localTypeParameters}}
Object.assign({{paramVar}}, convertParamsToRealParams({{param}} as any as Params, {{normTypeParametersName}}NameMap));
{{/if}}
{{/inline}}

{{> methodParametersInterfaces typeParameters='queryParameters' normTypeParametersName='normQueryParametersName' }}
{{> methodParametersInterfaces typeParameters='headerParameters' normTypeParametersName='normHeaderParametersName' }}
{{> methodParametersInterfaces typeParameters='pathParameters' normTypeParametersName='normPathParametersName' }}

{{> globalParametersInterfaces type='Query' globalTypeParameters=globalQueryParameters}}
{{> globalParametersInterfaces type='Header' globalTypeParameters=globalHeaderParameters}}
{{> globalParametersInterfaces type='Path' globalTypeParameters=globalPathParameters}}

//types for responses
{{#each methods}} 
export type {{responseTypeName}} = {{{responseType}}};
{{/each}}

export type MethodType = 'post' | 'get' | 'put' | 'delete' | 'patch';
interface Params {
    [key: string]: string
}

const convertParamsToRealParams = (params: Params, paramsNameMap: Params) => {
    return Object.keys(params).reduce((prev, key) => {
        return Object.assign(prev, { [paramsNameMap[key]]: params[key] });
    }, {}) as Params;
}

export class {{name}}API {   
    {{> globalParametersPublicField type='Query' globalTypeParameters=globalQueryParameters}}
    {{> globalParametersPublicField type='Header' globalTypeParameters=globalHeaderParameters}}
    {{> globalParametersPublicField type='Path' globalTypeParameters=globalPathParameters}}

    private makeRequest(path: string, method: MethodType, queryParams: Params = {}, headerParams: Params = {}, pathParams: Params = {}) {        
        const url = `{{url}}${path}`;
        
        {{>mergeGlobalParameters type='Query' globalTypeParameters=globalQueryParameters paramVar='queryParams'}}
        {{>mergeGlobalParameters type='Header' globalTypeParameters=globalHeaderParameters paramVar='headerParams'}}
        {{>mergeGlobalParameters type='Path' globalTypeParameters=globalPathParameters paramVar='pathParams'}}

        let urlWithPathParams = url;
        Object.keys(pathParams).forEach((key) => {
            urlWithPathParams = urlWithPathParams.replace(new RegExp(`{${key}}`, 'g'), encodeURIComponent(pathParams[key]));
        });

        let req = request[method](urlWithPathParams).query(queryParams).set(headerParams);
        return req;
    }    

    {{#each methods}}
    /**
    * {{{description}}}
    *
    */
    public {{normName}}({{params}}) {
        const queryParamsMapped = {} as Params;
        const headerParamsMapped = {} as Params;
        const pathParamsMapped = {} as Params;
        {{>mergeLocalParameters normTypeParametersName=normQueryParametersName localTypeParameters=queryParameters paramVar='queryParamsMapped' param='queryParams'}}        
        {{>mergeLocalParameters normTypeParametersName=normHeaderParametersName localTypeParameters=headerParameters paramVar='headerParamsMapped' param='headerParams'}}        
        {{>mergeLocalParameters normTypeParametersName=normPathParametersName localTypeParameters=pathParameters paramVar='pathParamsMapped' param='pathParams'}}        
        return this.makeRequest('{{path}}', '{{method}}', queryParamsMapped, headerParamsMapped, pathParamsMapped) as Request<{{responseTypeName}}>;
    }
    {{/each}}
}